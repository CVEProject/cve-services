const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./org.controller')
const { body, param, query } = require('express-validator')
const { parseGetParams, parseDeleteParams, parsePostParams, parseError, isOrgRole, isUserRole } = require('./org.middleware')
const CONSTANTS = require('../../../src/constants')

router.get('/org',
  mw.onlySecretariat,
  mw.validateUser,
  query(['page']).optional().isInt({ min: CONSTANTS.PAGINATOR_PAGE }),
  parseError,
  parseGetParams,
  controller.ORG_ALL)
router.post('/org',
  mw.onlySecretariat,
  mw.validateUser,
  body(['short_name']).isString().trim().escape().notEmpty(),
  body(['name']).isString().trim().escape().notEmpty(),
  body(['uuid']).optional().isString().trim().escape(),
  body(['authority.active_roles']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isOrgRole(val) }),
  body(['policies.id_quota']).optional().not().isArray().isInt({ min: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min, max: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max }).withMessage('The id_quota does not comply with CVE id quota limitations.'),
  parseError,
  parsePostParams,
  controller.ORG_CREATE_SINGLE)
router.get('/org/:identifier',
  mw.validateUser,
  param(['identifier']).isString().trim().escape(),
  parseError,
  parseGetParams,
  controller.ORG_SINGLE)
router.put('/org/:shortname',
  mw.onlySecretariat,
  mw.validateUser,
  param(['shortname']).isString().trim().escape(),
  query(['shortname']).optional().isString().trim().escape().notEmpty(),
  query(['id_quota']).optional().not().isArray().isInt({ min: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_min, max: CONSTANTS.MONGOOSE_VALIDATION.Org_policies_id_quota_max }).withMessage('The id_quota does not comply with CVE id quota limitations.'),
  query(['name']).optional().isString().trim().escape().notEmpty(),
  query(['active_roles.add']).optional().toArray(),
  query(['active_roles.add']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isOrgRole(val) }),
  query(['active_roles.remove']).optional().toArray(),
  query(['active_roles.remove']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isOrgRole(val) }),
  parseError,
  parsePostParams,
  controller.ORG_UPDATE_SINGLE)
router.get('/org/:shortname/users',
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  parseError,
  parseGetParams,
  controller.USER_ALL)
router.post('/org/:shortname/user',
  mw.onlySecretariatOrAdmin,
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  body(['username']).isString().trim().escape().notEmpty(),
  body(['org_uuid']).optional().isString().trim().escape(),
  body(['uuid']).optional().isString().trim().escape(),
  body(['name.first']).optional().isString().trim().escape(),
  body(['name.last']).optional().isString().trim().escape(),
  body(['name.middle']).optional().isString().trim().escape(),
  body(['name.suffix']).optional().isString().trim().escape(),
  body(['authority.active_roles']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isUserRole(val) }),
  parseError,
  parsePostParams,
  controller.USER_CREATE_SINGLE)
router.get('/org/:shortname/user/:username',
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  param(['username']).isString().trim().escape().notEmpty(),
  parseError,
  parseGetParams,
  controller.USER_SINGLE)
router.put('/org/:shortname/user/:username',
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  param(['username']).isString().trim().escape().notEmpty(),
  query(['active']).optional().isString().trim().escape().isIn(['true', 'false']),
  query(['new_username']).optional().isString().trim().escape().notEmpty(),
  query(['org_shortname']).optional().isString().trim().escape().notEmpty(),
  query(['name.first']).optional().isString().trim().escape(),
  query(['name.last']).optional().isString().trim().escape(),
  query(['name.middle']).optional().isString().trim().escape(),
  query(['name.suffix']).optional().isString().trim().escape(),
  query(['active_roles.add']).optional().toArray(),
  query(['active_roles.add']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isUserRole(val) }),
  query(['active_roles.remove']).optional().toArray(),
  query(['active_roles.remove']).optional().customSanitizer(val => { return val.map(x => { return x.toUpperCase() }) }).custom(val => { return isUserRole(val) }),
  parseError,
  parsePostParams,
  controller.USER_UPDATE_SINGLE)
router.delete('/org/:shortname/user/:username',
  mw.onlySecretariatOrAdmin,
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  param(['username']).isString().trim().escape().notEmpty(),
  parseError,
  parseDeleteParams,
  controller.USER_DELETE_SINGLE)
router.put('/org/:shortname/user/:username/reset_secret',
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  param(['username']).isString().trim().escape().notEmpty(),
  parseError,
  parsePostParams,
  controller.USER_RESET_SECRET)
router.get('/org/:shortname/id_quota',
  mw.validateUser,
  param(['shortname']).isString().trim().escape().notEmpty(),
  parseError,
  parseGetParams,
  controller.ORG_ID_QUOTA)

module.exports = router
