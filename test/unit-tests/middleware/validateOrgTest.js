/* eslint-disable no-unused-expressions */
const chai = require('chai')
const sinon = require('sinon')
const { validateOrg } = require('../../../src/middleware/middleware.js')
const OrgRepository = require('../../../src/repositories/orgRepository.js')
const expect = chai.expect

const secretariat = {
  short_name: 'mitre',
  name: 'MITRE Corporation',
  authority: {
    active_roles: [
      'SECRETARIAT',
      'CNA'
    ]
  },
  policies: {
    id_quota: 1248
  }
}

const nonSecretariat = {
  short_name: 'win_5',
  name: 'test_org',
  authority: {
    active_roles: [
      'CNA'
    ]
  },
  policies: {
    id_quota: 200
  }
}

const nonSecretariat2 = {
  short_name: 'cause_8',
  name: 'test_org2',
  authority: {
    active_roles: [
      'CNA'
    ]
  },
  policies: {
    id_quota: 888
  }
}

describe('Testing the validateOrg function', () => {
  let status, json, res, next, getOrgRepository, orgRepo
  beforeEach(() => {
    status = sinon.stub()
    json = sinon.spy()
    res = { json, status }
    next = sinon.stub()
    status.returns(res)

    orgRepo = new OrgRepository()
    getOrgRepository = sinon.stub()
    getOrgRepository.returns(orgRepo)
  })
  context('Positive Tests', () => {
    it('Secretariat can update itself', async () => {
      sinon.stub(orgRepo, 'isSecretariat').returns(true)

      const req = {
        ctx: {
          org: secretariat.short_name,
          repositories: {
            getOrgRepository
          }
        },
        params: {
          shortname: secretariat.short_name
        },
        query: {
          id_quota: 111
        }
      }
      await validateOrg(req, res, next)

      expect(next.calledOnce).to.be.true
      expect(next.firstCall.args).to.be.empty
    })
    it('Secretariat can update another org', async () => {
      sinon.stub(orgRepo, 'isSecretariat').returns(true)

      const req = {
        ctx: {
          org: secretariat.short_name,
          repositories: {
            getOrgRepository
          }
        },
        params: {
          shortname: nonSecretariat.short_name
        },
        query: {
          id_quota: 999
        }
      }
      await validateOrg(req, res, next)

      expect(next.calledOnce).to.be.true
      expect(next.firstCall.args).to.be.empty
    })
    it('Non-secretariat can update itself', async () => {
      sinon.stub(orgRepo, 'isSecretariat').returns(true)

      const req = {
        ctx: {
          org: nonSecretariat.short_name,
          repositories: {
            getOrgRepository
          }
        },
        params: {
          shortname: nonSecretariat.short_name
        }
      }
      await validateOrg(req, res, next)

      expect(next.calledOnce).to.be.true
      expect(next.firstCall.args).to.be.empty
    })
  })
  context('Negative Tests', () => {
    it('Non-secretariat cannot update its fields other than last_active', async () => {
      sinon.stub(orgRepo, 'isSecretariat').returns(false)

      const req = {
        ctx: {
          org: nonSecretariat.short_name,
          repositories: {
            getOrgRepository
          }
        },
        params: {
          shortname: nonSecretariat.short_name
        },
        query: {
          id_quota: 999
        }
      }
      await validateOrg(req, res, next)

      expect(status.calledWith(403)).to.be.true
      expect(next.calledOnce).to.be.false
    })
    it('Non-secretariat cannot update another org', async () => {
      sinon.stub(orgRepo, 'isSecretariat').returns(false)

      const req = {
        ctx: {
          org: nonSecretariat.short_name,
          repositories: {
            getOrgRepository
          }
        },
        params: {
          shortname: nonSecretariat2.short_name
        },
        query: {
          id_quota: 999
        }
      }
      await validateOrg(req, res, next)

      expect(status.calledWith(403)).to.be.true
      expect(next.calledOnce).to.be.false
    })
  })
})
