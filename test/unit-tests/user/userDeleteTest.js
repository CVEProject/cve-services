const express = require('express')
const app = express()
const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))

// Body Parser Middleware
app.use(express.json())
app.use(express.urlencoded({ extended: false })) // Allows use to handle url encoded data
const middleware = require('../../../src/middleware/middleware')
app.use(middleware.createCtxAndReqUUID)

const errors = require('../../../src/controller/org.controller/error')
const error = new errors.OrgControllerError()

const userFixtures = require('./mockObjects.user')
const orgController = require('../../../src/controller/org.controller/org.controller')
const orgParams = require('../../../src/controller/org.controller/org.middleware')

describe('Testing the DELETE /org/:shortname/user/:username endpoint in Org Conttroller', () => {
  context('Negative Tests', () => {
    it('User cannot be deleted because org does not exist', (done) => {
      class OrgUserNotUpdatedOrgDoesntExist {
        async getOrgUUID () {
          return null
        }

        async isSecretariat () {
          return true
        }
      }

      class NullUserRepo {
        async getUserUUID () {
          return null
        }

        async findOneByUserNameAndOrgUUID () {
          return null
        }

        async isAdmin () {
          return null
        }
      }

      app.route('/user-not-deleted-org-doesnt-exist/:shortname/:username')
        .delete((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new OrgUserNotUpdatedOrgDoesntExist() },
            getUserRepository: () => { return new NullUserRepo() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseDeleteParams, orgController.USER_DELETE_SINGLE)

      const shortname = userFixtures.nonExistentOrg.short_name.replace(/\s/g, '')
      const username = userFixtures.existentUser.username.replace(/\s/g, '')
      chai.request(app)
        .delete(`/user-not-deleted-org-doesnt-exist/${shortname}/${username}`)
        .set(userFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.orgDneParam(userFixtures.nonExistentOrg.short_name)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User cannot be deleted because user does not exist', (done) => {
      class OrgUserNotDeletedOrgDoesntExist {
        async getOrgUUID () {
          return userFixtures.existentOrg
        }

        async isSecretariat () {
          return true
        }
      }

      class UserNotDeletedUserDoesntExist {
        async findOneByUserNameAndOrgUUID () {
          return null
        }

        async isAdmin () {
          return null
        }
      }

      app.route('/user-not-deleted-user-doesnt-exist/:shortname/:username')
        .delete((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new OrgUserNotDeletedOrgDoesntExist() },
            getUserRepository: () => { return new UserNotDeletedUserDoesntExist() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseDeleteParams, orgController.USER_DELETE_SINGLE)

      chai.request(app)
        .delete(`/user-not-deleted-user-doesnt-exist/${userFixtures.existentOrg.short_name}/${userFixtures.nonExistentUser.username}`)
        .set(userFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.userDne(userFixtures.nonExistentUser.username)
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })

    it('User cannot be deleted because requester is not Org Admin or Secretariat', (done) => {
      class Org {
        async getOrgUUID () {
          return userFixtures.existentOrg.UUID
        }

        async isSecretariat () {
          return false
        }
      }

      class User {
        async findOneByUserNameAndOrgUUID () {
          return userFixtures.existentUser
        }

        async isAdmin () {
          return false
        }
      }

      app.route('/user-not-deleted-requester-not-admin-secretariat/:shortname/:username')
        .delete((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new Org() },
            getUserRepository: () => { return new User() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseDeleteParams, orgController.USER_DELETE_SINGLE)

      chai.request(app)
        .delete(`/user-not-deleted-requester-not-admin-secretariat/${userFixtures.existentOrg.short_name}/${userFixtures.existentUser.username}`)
        .set(userFixtures.owningOrgHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(403)
          expect(res).to.have.property('body').and.to.be.a('object')
          const errObj = error.notSameUserOrSecretariat()
          expect(res.body.error).to.equal(errObj.error)
          expect(res.body.message).to.equal(errObj.message)
          done()
        })
    })
  })

  context('Positive Tests', () => {
    it('User can be deleted because requester is an Org Admin', (done) => {
      class Org {
        async getOrgUUID () {
          return userFixtures.existentOrgDummy.UUID
        }

        async isSecretariat () {
          return false
        }
      }

      class User {
        async findOneByUserNameAndOrgUUID () {
          return userFixtures.userA
        }

        async isAdmin (username, shortname) {
          expect(username).to.equal(userFixtures.userDHeader['CVE-API-USER'])
          expect(shortname).to.equal(userFixtures.existentOrgDummy.short_name)
          return true
        }

        async deleteByUserNameAndOrgUUID (username, orgUUID) {
          return (userFixtures.userA.username, userFixtures.existentOrg.UUID)
        }
      }

      app.route('/user-deleted-requester-admin/:shortname/:username')
        .delete((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new Org() },
            getUserRepository: () => { return new User() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseDeleteParams, orgController.USER_DELETE_SINGLE)

      chai.request(app)
        .delete(`/user-deleted-requester-admin/${userFixtures.existentOrgDummy.short_name}/${userFixtures.userA.username}`)
        .set(userFixtures.userDHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(204)
          done()
        })
    })

    it('User can be deleted because requester is the Secretariat', (done) => {
      class Org {
        async getOrgUUID () {
          return userFixtures.existentOrgDummy.UUID
        }

        async isSecretariat () {
          return true
        }
      }

      class User {
        async findOneByUserNameAndOrgUUID () {
          return userFixtures.userA
        }

        async isAdmin () {
          return false
        }

        async deleteByUserNameAndOrgUUID (username, orgUUID) {
          return (userFixtures.userA.username, userFixtures.existentOrg.UUID)
        }
      }

      app.route('/user-deleted-requester-secretariat/:shortname/:username')
        .delete((req, res, next) => {
          const factory = {
            getOrgRepository: () => { return new Org() },
            getUserRepository: () => { return new User() }
          }
          req.ctx.repositories = factory
          next()
        }, orgParams.parseDeleteParams, orgController.USER_DELETE_SINGLE)

      chai.request(app)
        .delete(`/user-deleted-requester-secretariat/${userFixtures.existentOrgDummy.short_name}/${userFixtures.userA.username}`)
        .set(userFixtures.secretariatHeader)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(204)
          done()
        })
    })
  })
})
